// ------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated.
//
//     - To turn off auto-generation set:
//
//         [TestJenkins (AutoGenerate = false)]
//
//     - To trigger manual generation invoke:
//
//         nuke --generate-configuration Jenkins --host Jenkins
//
// </auto-generated>
// ------------------------------------------------------------------------------

pipeline {
    agent {
        label 'test_agent'
    }
    parameters {
        choice name: 'Verbosity', choices: ['Normal','Minimal','Quiet','Verbose'], description: 'Logging verbosity during build execution. Default is \'Normal\'.'
        string name: 'ApiKey', defaultValue: '', description: 'NuGet Api Key'
        string name: 'IgnoreFailedSources', defaultValue: 'False', description: ''
        string name: 'Configuration', defaultValue: 'Debug', description: 'Configuration for compilation'
        string name: 'StringArray', defaultValue: 'System.String[]', description: ''
        string name: 'IntegerArray', defaultValue: 'System.Int32[]', description: ''
        string name: 'ConfigurationArray', defaultValue: 'Nuke.Common.Tests.CI.ConfigurationGenerationTest+Configuration[]', description: ''
        string name: 'Source', defaultValue: 'https://api.nuget.org/v3/index.json', description: 'NuGet Source for Packages'
        string name: 'GitHubToken', defaultValue: '', description: 'GitHub Token'
        string name: 'AzurePipelinesSystemAccessToken', defaultValue: '', description: 'Azure Pipelines System Access Token'
        gitParameter  branchFilter: 'origin/(.*)', type: 'PT_BRANCH', description: 'Branch to use for checkout', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'DEFAULT', sortMode: 'ASCENDING', defaultValue: 'develop'
    }
    stages {
        stage("Restore") {
            steps {
                script {
                    if (isUnix()) {
                        sh encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.sh Restore --skip --no-logo"
                    }
                    else {
                        bat encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.cmd Restore --skip --no-logo"
                    }
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "src/*/obj/**", excludes: "", fingerprint: true, onlyIfSuccessful: false
            }
        }
        stage("Compile") {
            steps {
                script {
                    if (isUnix()) {
                        sh encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.sh Compile --skip --no-logo"
                    }
                    else {
                        bat encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.cmd Compile --skip --no-logo"
                    }
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "src/*/bin/**", excludes: "", fingerprint: true, onlyIfSuccessful: false
            }
        }
        stage("Test") {
            steps {
                script {
                    if (isUnix()) {
                        sh encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.sh Test --skip --no-logo"
                    }
                    else {
                        bat encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.cmd Test --skip --no-logo"
                    }
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "output/test-results/*.trx", excludes: "", fingerprint: true, onlyIfSuccessful: false
                archiveArtifacts allowEmptyArchive: true, artifacts: "output/test-results/*.xml", excludes: "", fingerprint: true, onlyIfSuccessful: false
                xunit([xUnitDotNet(excludesPattern: "", pattern: "output/test-results/*.trx,output/test-results/*.xml", skipNoTestFiles: true, stopProcessingIfError: true, failIfNotNew: true)])
            }
        }
        stage("Coverage") {
            steps {
                script {
                    if (isUnix()) {
                        sh encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.sh Coverage --skip --no-logo"
                    }
                    else {
                        bat encoding: 'UTF-8', returnStatus: false, returnStdout: false, script: "build.cmd Coverage --skip --no-logo"
                    }
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "output/coverage-report.zip", excludes: "", fingerprint: true, onlyIfSuccessful: false
            }
        }
    }
}
